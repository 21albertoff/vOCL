// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerCup.flex

package lexicoOCL;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0,  0,  3,  4,  5,  6,  1,  7,  8,  9, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11,  0, 12, 13, 14,  0, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 23, 23, 25, 26, 27, 28, 
    29, 23, 30, 31, 32, 33, 34, 35, 36, 23, 37,  0,  0,  0,  0, 23, 
     0, 38, 39, 40, 41, 42, 43, 44, 23, 45, 23, 23, 46, 47, 48, 49, 
    50, 23, 51, 52, 53, 54, 55, 56, 57, 23, 58,  0, 59,  0,  0,  0, 
     0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\23\16\1\17\1\0\1\20\21\21\1\22\1\23\1\24"+
    "\1\25\2\0\14\16\1\26\10\16\1\0\27\21\2\0"+
    "\1\27\4\16\1\30\2\16\1\31\2\16\1\32\1\33"+
    "\1\16\1\34\2\16\1\35\1\36\1\16\1\11\1\37"+
    "\2\21\1\10\2\21\1\40\1\41\1\42\12\21\1\43"+
    "\4\16\1\44\2\16\1\45\6\21\1\46\6\21\6\16"+
    "\2\21\1\47\1\50\6\21\6\16\1\51\6\21\1\52"+
    "\1\53\1\54\2\21\1\55\1\56\2\21\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\74\0\74\0\360"+
    "\0\u012c\0\74\0\u0168\0\u01a4\0\u01e0\0\74\0\u021c\0\u0258"+
    "\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\u0654\0\u0690\0\u06cc\0\74\0\u0708\0\74\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\74"+
    "\0\74\0\74\0\74\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0384\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u0384\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u0384\0\u1770\0\u17ac\0\u0384\0\u17e8\0\u1824\0\u0384"+
    "\0\u0384\0\u1860\0\u0384\0\u189c\0\u18d8\0\u0384\0\u0384\0\u1914"+
    "\0\74\0\u0780\0\u1950\0\u198c\0\u0780\0\u19c8\0\u1a04\0\u0780"+
    "\0\u0780\0\u0780\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\74\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\u0384\0\u1d88\0\u1dc4\0\u0384\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u0780\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u0780\0\u0780\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u0780\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u0384"+
    "\0\u0384\0\u0384\0\u26e8\0\u2724\0\u0780\0\u0780\0\u2760\0\u279c"+
    "\0\u0780";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\4\25\1\26\1\27\1\25"+
    "\1\30\1\31\1\32\1\25\1\33\4\25\1\34\2\25"+
    "\1\35\1\36\1\37\3\25\1\40\1\41\3\25\1\42"+
    "\1\25\1\43\6\25\1\44\75\0\1\3\101\0\1\45"+
    "\102\0\1\46\75\0\1\47\1\50\1\51\1\52\1\50"+
    "\1\53\4\50\1\54\3\50\1\55\1\56\1\57\5\50"+
    "\1\60\1\50\1\61\1\62\1\50\1\63\3\50\1\64"+
    "\3\50\1\65\1\66\1\67\5\50\13\0\1\13\74\0"+
    "\1\70\75\0\1\71\1\72\72\0\1\73\113\0\1\74"+
    "\24\0\1\75\23\0\1\25\5\0\13\25\1\76\37\25"+
    "\13\0\1\25\5\0\14\25\1\77\24\25\1\100\11\25"+
    "\13\0\1\25\5\0\14\25\1\101\24\25\1\102\11\25"+
    "\13\0\1\25\5\0\4\25\1\103\25\25\1\104\20\25"+
    "\13\0\1\25\5\0\53\25\13\0\1\25\5\0\13\25"+
    "\1\105\24\25\1\106\12\25\13\0\1\25\5\0\4\25"+
    "\1\107\25\25\1\110\20\25\13\0\1\25\5\0\14\25"+
    "\1\111\36\25\13\0\1\25\5\0\16\25\1\112\34\25"+
    "\13\0\1\25\5\0\14\25\1\113\1\25\1\114\22\25"+
    "\1\115\1\25\1\116\7\25\13\0\1\25\5\0\4\25"+
    "\1\117\25\25\1\120\20\25\13\0\1\25\5\0\14\25"+
    "\1\121\36\25\13\0\1\25\5\0\41\25\1\100\11\25"+
    "\13\0\1\25\5\0\41\25\1\102\11\25\13\0\1\25"+
    "\5\0\32\25\1\104\20\25\13\0\1\25\5\0\40\25"+
    "\1\106\12\25\13\0\1\25\5\0\32\25\1\110\20\25"+
    "\13\0\1\25\5\0\41\25\1\115\1\25\1\116\7\25"+
    "\13\0\1\25\5\0\32\25\1\122\20\25\13\0\1\123"+
    "\73\0\1\50\5\0\1\50\1\124\51\50\13\0\1\50"+
    "\5\0\53\50\13\0\1\50\5\0\14\50\1\125\24\50"+
    "\1\126\11\50\13\0\1\50\5\0\10\50\1\127\24\50"+
    "\1\130\15\50\13\0\1\50\5\0\11\50\1\131\24\50"+
    "\1\132\14\50\13\0\1\50\5\0\1\133\7\50\1\134"+
    "\3\50\1\135\11\50\1\136\6\50\1\137\3\50\1\140"+
    "\11\50\13\0\1\50\5\0\14\50\1\141\24\50\1\142"+
    "\11\50\13\0\1\50\5\0\10\50\1\143\10\50\1\144"+
    "\13\50\1\145\10\50\1\146\4\50\13\0\1\50\5\0"+
    "\14\50\1\147\24\50\1\150\11\50\13\0\1\50\5\0"+
    "\27\50\1\151\23\50\13\0\1\50\5\0\41\50\1\126"+
    "\11\50\13\0\1\50\5\0\35\50\1\130\15\50\13\0"+
    "\1\50\5\0\36\50\1\132\14\50\13\0\1\50\5\0"+
    "\26\50\1\136\6\50\1\137\3\50\1\140\11\50\13\0"+
    "\1\50\5\0\41\50\1\142\11\50\13\0\1\50\5\0"+
    "\35\50\1\145\10\50\1\146\4\50\13\0\1\50\5\0"+
    "\41\50\1\152\11\50\37\0\1\153\24\0\1\154\73\0"+
    "\1\154\22\0\1\25\5\0\3\25\1\155\47\25\13\0"+
    "\1\25\5\0\14\25\1\156\36\25\13\0\1\25\5\0"+
    "\41\25\1\157\11\25\13\0\1\25\5\0\13\25\1\160"+
    "\37\25\13\0\1\25\5\0\40\25\1\161\12\25\13\0"+
    "\1\25\5\0\5\25\1\162\45\25\13\0\1\25\5\0"+
    "\33\25\1\162\17\25\13\0\1\25\5\0\10\25\1\163"+
    "\7\25\1\164\1\25\1\165\30\25\13\0\1\25\5\0"+
    "\35\25\1\166\7\25\1\167\1\25\1\165\3\25\13\0"+
    "\1\25\5\0\20\25\1\170\32\25\13\0\1\25\5\0"+
    "\45\25\1\170\5\25\13\0\1\25\5\0\20\25\1\171"+
    "\32\25\13\0\1\25\5\0\17\25\1\172\33\25\13\0"+
    "\1\25\5\0\4\25\1\173\46\25\13\0\1\25\5\0"+
    "\44\25\1\174\6\25\13\0\1\25\5\0\32\25\1\173"+
    "\20\25\13\0\1\25\5\0\11\25\1\175\41\25\13\0"+
    "\1\25\5\0\36\25\1\176\14\25\13\0\1\25\5\0"+
    "\16\25\1\177\34\25\13\0\1\25\5\0\36\25\1\200"+
    "\14\25\5\0\1\201\5\0\1\123\73\0\1\50\5\0"+
    "\17\50\1\202\33\50\13\0\1\50\5\0\13\50\1\203"+
    "\37\50\13\0\1\50\5\0\40\50\1\204\12\50\13\0"+
    "\1\50\5\0\22\50\1\205\30\50\13\0\1\50\5\0"+
    "\47\50\1\205\3\50\13\0\1\50\5\0\14\50\1\206"+
    "\36\50\13\0\1\50\5\0\41\50\1\207\11\50\13\0"+
    "\1\50\5\0\24\50\1\210\26\50\13\0\1\50\5\0"+
    "\13\50\1\211\37\50\13\0\1\50\5\0\3\50\1\212"+
    "\47\50\13\0\1\50\5\0\51\50\1\210\1\50\13\0"+
    "\1\50\5\0\40\50\1\211\12\50\13\0\1\50\5\0"+
    "\31\50\1\212\21\50\13\0\1\50\5\0\21\50\1\213"+
    "\31\50\13\0\1\50\5\0\46\50\1\214\4\50\13\0"+
    "\1\50\5\0\25\50\1\215\25\50\13\0\1\50\5\0"+
    "\1\50\1\216\51\50\13\0\1\50\5\0\52\50\1\217"+
    "\13\0\1\50\5\0\27\50\1\220\23\50\13\0\1\50"+
    "\5\0\11\50\1\221\7\50\1\222\31\50\13\0\1\50"+
    "\5\0\11\50\1\223\7\50\1\224\14\50\1\223\7\50"+
    "\1\224\4\50\13\0\1\50\5\0\44\50\1\202\6\50"+
    "\13\0\1\50\5\0\36\50\1\223\7\50\1\224\4\50"+
    "\25\0\1\225\121\0\1\225\33\0\1\25\5\0\11\25"+
    "\1\226\41\25\13\0\1\25\5\0\36\25\1\227\14\25"+
    "\13\0\1\25\5\0\20\25\1\230\32\25\13\0\1\25"+
    "\5\0\45\25\1\231\5\25\13\0\1\25\5\0\20\25"+
    "\1\232\32\25\13\0\1\25\5\0\4\25\1\233\46\25"+
    "\13\0\1\25\5\0\45\25\1\232\5\25\13\0\1\25"+
    "\5\0\32\25\1\234\20\25\13\0\1\25\5\0\20\25"+
    "\1\235\32\25\13\0\1\25\5\0\45\25\1\235\5\25"+
    "\13\0\1\25\5\0\5\25\1\176\45\25\13\0\1\25"+
    "\5\0\33\25\1\176\17\25\13\0\1\50\5\0\2\50"+
    "\1\236\50\50\13\0\1\50\5\0\30\50\1\237\22\50"+
    "\13\0\1\50\5\0\14\50\1\240\36\50\13\0\1\50"+
    "\5\0\41\50\1\241\11\50\13\0\1\50\5\0\13\50"+
    "\1\242\37\50\13\0\1\50\5\0\40\50\1\243\12\50"+
    "\13\0\1\50\5\0\4\50\1\244\46\50\13\0\1\50"+
    "\5\0\17\50\1\245\33\50\13\0\1\50\5\0\32\50"+
    "\1\244\20\50\13\0\1\50\5\0\44\50\1\246\6\50"+
    "\13\0\1\50\5\0\14\50\1\247\36\50\13\0\1\50"+
    "\5\0\15\50\1\250\35\50\13\0\1\50\5\0\41\50"+
    "\1\251\11\50\13\0\1\50\5\0\42\50\1\252\10\50"+
    "\13\0\1\25\5\0\4\25\1\253\46\25\13\0\1\25"+
    "\5\0\32\25\1\254\20\25\13\0\1\25\5\0\4\25"+
    "\1\255\46\25\13\0\1\25\5\0\32\25\1\256\20\25"+
    "\13\0\1\25\5\0\6\25\1\257\44\25\13\0\1\25"+
    "\5\0\34\25\1\260\16\25\13\0\1\50\5\0\1\261"+
    "\52\50\13\0\1\50\5\0\26\50\1\262\24\50\13\0"+
    "\1\50\5\0\16\50\1\263\34\50\13\0\1\50\5\0"+
    "\43\50\1\263\7\50\13\0\1\50\5\0\3\50\1\264"+
    "\47\50\13\0\1\50\5\0\31\50\1\264\21\50\13\0"+
    "\1\50\5\0\20\50\1\265\32\50\13\0\1\50\5\0"+
    "\45\50\1\266\5\50\13\0\1\50\5\0\23\50\1\267"+
    "\27\50\13\0\1\50\5\0\15\50\1\270\35\50\13\0"+
    "\1\50\5\0\50\50\1\271\2\50\13\0\1\50\5\0"+
    "\42\50\1\272\10\50\13\0\1\25\5\0\1\273\52\25"+
    "\13\0\1\25\5\0\26\25\1\274\24\25\13\0\1\25"+
    "\5\0\24\25\1\275\26\25\13\0\1\25\5\0\51\25"+
    "\1\276\1\25\13\0\1\25\5\0\4\25\1\277\46\25"+
    "\13\0\1\25\5\0\32\25\1\300\20\25\13\0\1\50"+
    "\5\0\20\50\1\301\32\50\13\0\1\50\5\0\45\50"+
    "\1\301\5\50\13\0\1\50\5\0\16\50\1\302\34\50"+
    "\13\0\1\50\5\0\43\50\1\303\7\50\13\0\1\50"+
    "\5\0\4\50\1\304\46\50\13\0\1\50\5\0\4\50"+
    "\1\305\46\50\13\0\1\50\5\0\32\50\1\306\20\50"+
    "\13\0\1\50\5\0\32\50\1\307\20\50\13\0\1\25"+
    "\5\0\13\25\1\310\37\25\13\0\1\25\5\0\40\25"+
    "\1\310\12\25\13\0\1\25\5\0\20\25\1\311\32\25"+
    "\13\0\1\25\5\0\45\25\1\311\5\25\13\0\1\25"+
    "\5\0\16\25\1\312\34\25\13\0\1\25\5\0\43\25"+
    "\1\312\7\25\13\0\1\50\5\0\10\50\1\313\42\50"+
    "\13\0\1\50\5\0\35\50\1\314\15\50\13\0\1\50"+
    "\5\0\16\50\1\315\34\50\13\0\1\50\5\0\16\50"+
    "\1\316\34\50\13\0\1\50\5\0\43\50\1\315\7\50"+
    "\13\0\1\50\5\0\43\50\1\316\7\50\13\0\1\50"+
    "\5\0\13\50\1\317\37\50\13\0\1\50\5\0\40\50"+
    "\1\320\12\50\13\0\1\50\5\0\6\50\1\321\44\50"+
    "\13\0\1\50\5\0\34\50\1\321\16\50\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\2\1\1\11\3\1\1\11"+
    "\25\1\1\11\1\0\1\11\21\1\4\11\2\0\25\1"+
    "\1\0\27\1\2\0\24\1\1\11\23\1\1\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private int yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
            // fall through
          case 48: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 49: break;
          case 3:
            { return new Symbol(sym.PARENTESIS_IZQ, yychar, yyline, yytext());
            }
            // fall through
          case 50: break;
          case 4:
            { return new Symbol(sym.PARENTESIS_DER, yychar, yyline, yytext());
            }
            // fall through
          case 51: break;
          case 5:
            { return new Symbol(sym.MULTIPLICACION, yychar, yyline, yytext());
            }
            // fall through
          case 52: break;
          case 6:
            { return new Symbol(sym.MAS, yychar, yyline, yytext());
            }
            // fall through
          case 53: break;
          case 7:
            { return new Symbol(sym.MENOS, yychar, yyline, yytext());
            }
            // fall through
          case 54: break;
          case 8:
            { return new Symbol(sym.DIVISION, yychar, yyline, yytext());
            }
            // fall through
          case 55: break;
          case 9:
            { return new Symbol(sym.NUMERO, yychar, yyline, yytext());
            }
            // fall through
          case 56: break;
          case 10:
            { return new Symbol(sym.DOSPUNTOS, yychar, yyline, yytext());
            }
            // fall through
          case 57: break;
          case 11:
            { return new Symbol(sym.MENOR, yychar, yyline, yytext());
            }
            // fall through
          case 58: break;
          case 12:
            { return new Symbol(sym.IGUAL, yychar, yyline, yytext());
            }
            // fall through
          case 59: break;
          case 13:
            { return new Symbol(sym.MAYOR, yychar, yyline, yytext());
            }
            // fall through
          case 60: break;
          case 14:
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
            // fall through
          case 61: break;
          case 15:
            { return new Symbol(sym.O, yychar, yyline, yytext());
            }
            // fall through
          case 62: break;
          case 16:
            { return new Symbol(sym.FLECHA, yychar, yyline, yytext());
            }
            // fall through
          case 63: break;
          case 17:
            { return new Symbol(sym.ATRIBUTO, yychar, yyline, yytext());
            }
            // fall through
          case 64: break;
          case 18:
            { return new Symbol(sym.DOBLEPUNTOS, yychar, yyline, yytext());
            }
            // fall through
          case 65: break;
          case 19:
            { return new Symbol(sym.MENOR_IGUAL, yychar, yyline, yytext());
            }
            // fall through
          case 66: break;
          case 20:
            { return new Symbol(sym.DISTINTO, yychar, yyline, yytext());
            }
            // fall through
          case 67: break;
          case 21:
            { return new Symbol(sym.MAYOR_IGUAL, yychar, yyline, yytext());
            }
            // fall through
          case 68: break;
          case 22:
            { return new Symbol(sym.OR, yychar, yyline, yytext());
            }
            // fall through
          case 69: break;
          case 23:
            { return new Symbol(sym.AND, yychar, yyline, yytext());
            }
            // fall through
          case 70: break;
          case 24:
            { return new Symbol(sym.DEFINICION, yychar, yyline, yytext());
            }
            // fall through
          case 71: break;
          case 25:
            { return new Symbol(sym.INVARIANTE, yychar, yyline, yytext());
            }
            // fall through
          case 72: break;
          case 26:
            { return new Symbol(sym.LET, yychar, yyline, yytext());
            }
            // fall through
          case 73: break;
          case 27:
            { return new Symbol(sym.NOT, yychar, yyline, yytext());
            }
            // fall through
          case 74: break;
          case 28:
            { return new Symbol(sym.PRECONDICION, yychar, yyline, yytext());
            }
            // fall through
          case 75: break;
          case 29:
            { return new Symbol(sym.SELF, yychar, yyline, yytext());
            }
            // fall through
          case 76: break;
          case 30:
            { return new Symbol(sym.XOR, yychar, yyline, yytext());
            }
            // fall through
          case 77: break;
          case 31:
            { return new Symbol(sym.VALOR_ABSOLUTO, yychar, yyline, yytext());
            }
            // fall through
          case 78: break;
          case 32:
            { return new Symbol(sym.MAXIMO, yychar, yyline, yytext());
            }
            // fall through
          case 79: break;
          case 33:
            { return new Symbol(sym.MINIMO, yychar, yyline, yytext());
            }
            // fall through
          case 80: break;
          case 34:
            { return new Symbol(sym.MODULO, yychar, yyline, yytext());
            }
            // fall through
          case 81: break;
          case 35:
            { return new Symbol(sym.VALORPROPIEDAD, yychar, yyline, yytext());
            }
            // fall through
          case 82: break;
          case 36:
            { return new Symbol(sym.VALORINICIAL, yychar, yyline, yytext());
            }
            // fall through
          case 83: break;
          case 37:
            { return new Symbol(sym.POSTCONDICION, yychar, yyline, yytext());
            }
            // fall through
          case 84: break;
          case 38:
            { return new Symbol(sym.SIZE, yychar, yyline, yytext());
            }
            // fall through
          case 85: break;
          case 39:
            { return new Symbol(sym.TRUNCADO, yychar, yyline, yytext());
            }
            // fall through
          case 86: break;
          case 40:
            { return new Symbol(sym.REDONDEO, yychar, yyline, yytext());
            }
            // fall through
          case 87: break;
          case 41:
            { return new Symbol(sym.CONCATENACION, yychar, yyline, yytext());
            }
            // fall through
          case 88: break;
          case 42:
            { return new Symbol(sym.BOOLEAN, yychar, yyline, yytext());
            }
            // fall through
          case 89: break;
          case 43:
            { return new Symbol(sym.CONTEXT, yychar, yyline, yytext());
            }
            // fall through
          case 90: break;
          case 44:
            { return new Symbol(sym.INTEGER, yychar, yyline, yytext());
            }
            // fall through
          case 91: break;
          case 45:
            { return new Symbol(sym.MINUSCULA, yychar, yyline, yytext());
            }
            // fall through
          case 92: break;
          case 46:
            { return new Symbol(sym.MAYUSCULA, yychar, yyline, yytext());
            }
            // fall through
          case 93: break;
          case 47:
            { return new Symbol(sym.SUBSTRING, yychar, yyline, yytext());
            }
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
