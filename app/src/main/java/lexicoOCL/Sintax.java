
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexicoOCL;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\002\010\000\002\002\007\000\002\002\010" +
    "\000\002\002\011\000\002\002\010\000\002\002\006\000" +
    "\002\002\006\000\002\002\006\000\002\012\003\000\002" +
    "\012\003\000\002\012\004\000\002\012\004\000\002\013" +
    "\004\000\002\013\007\000\002\013\013\000\002\014\007" +
    "\000\002\014\007\000\002\014\010\000\002\014\012\000" +
    "\002\017\005\000\002\016\007\000\002\016\007\000\002" +
    "\011\006\000\002\011\006\000\002\011\007\000\002\011" +
    "\006\000\002\011\010\000\002\011\010\000\002\011\012" +
    "\000\002\011\013\000\002\011\011\000\002\011\010\000" +
    "\002\011\007\000\002\011\010\000\002\011\010\000\002" +
    "\011\012\000\002\011\012\000\002\011\005\000\002\011" +
    "\004\000\002\011\006\000\002\005\005\000\002\005\006" +
    "\000\002\005\007\000\002\005\010\000\002\005\011\000" +
    "\002\005\012\000\002\005\010\000\002\005\010\000\002" +
    "\006\005\000\002\006\006\000\002\006\010\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\020\003" +
    "\000\002\020\003\000\002\003\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\015\003\000\002" +
    "\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\035\006\001\002\000\012\041\014\046" +
    "\013\047\012\056\011\001\002\000\004\002\010\001\002" +
    "\000\004\060\007\001\002\000\012\041\uffac\046\uffac\047" +
    "\uffac\056\uffac\001\002\000\004\002\001\001\002\000\004" +
    "\047\260\001\002\000\004\060\251\001\002\000\006\044" +
    "\203\060\204\001\002\000\006\047\016\060\015\001\002" +
    "\000\004\047\201\001\002\000\010\040\021\045\023\060" +
    "\020\001\002\000\004\045\072\001\002\000\066\004\036" +
    "\005\047\006\040\007\042\010\032\011\050\012\035\013" +
    "\030\014\054\015\041\016\061\017\027\020\031\021\043" +
    "\022\037\023\053\024\044\025\055\026\057\027\046\030" +
    "\034\031\056\032\045\033\052\034\051\045\uffad\001\002" +
    "\000\070\004\036\005\047\006\040\007\042\010\032\011" +
    "\050\012\035\013\030\014\054\015\041\016\061\017\027" +
    "\020\031\021\043\022\037\023\053\024\044\025\055\026" +
    "\057\027\046\030\034\031\056\032\045\033\052\034\051" +
    "\045\uffae\054\uffae\001\002\000\004\002\uffff\001\002\000" +
    "\004\045\024\001\002\000\070\002\uffd8\004\036\005\047" +
    "\006\040\007\042\010\032\011\050\012\035\013\030\014" +
    "\054\015\041\016\061\017\027\020\031\021\043\022\037" +
    "\023\053\024\044\025\055\026\057\027\046\030\034\031" +
    "\056\032\045\033\052\034\051\036\uffd8\001\002\000\012" +
    "\040\uffcb\045\uffcb\060\uffcb\061\uffcb\001\002\000\012\040" +
    "\uffc9\045\uffc9\060\uffc9\061\uffc9\001\002\000\012\040\uffc6" +
    "\045\uffc6\060\uffc6\061\uffc6\001\002\000\012\040\uffb1\045" +
    "\uffb1\060\uffb1\061\uffb1\001\002\000\012\040\uffc5\045\uffc5" +
    "\060\uffc5\061\uffc5\001\002\000\012\040\uffb4\045\uffb4\060" +
    "\uffb4\061\uffb4\001\002\000\006\060\065\061\063\001\002" +
    "\000\012\040\uffbd\045\uffbd\060\uffbd\061\uffbd\001\002\000" +
    "\012\040\uffb2\045\uffb2\060\uffb2\061\uffb2\001\002\000\012" +
    "\040\uffb8\045\uffb8\060\uffb8\061\uffb8\001\002\000\012\040" +
    "\uffc3\045\uffc3\060\uffc3\061\uffc3\001\002\000\012\040\uffb6" +
    "\045\uffb6\060\uffb6\061\uffb6\001\002\000\012\040\uffaf\045" +
    "\uffaf\060\uffaf\061\uffaf\001\002\000\012\040\uffb5\045\uffb5" +
    "\060\uffb5\061\uffb5\001\002\000\012\040\uffc4\045\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\012\040\uffc1\045\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\012\040\uffba\045\uffba\060\uffba\061" +
    "\uffba\001\002\000\012\040\uffbe\045\uffbe\060\uffbe\061\uffbe" +
    "\001\002\000\012\040\uffb7\045\uffb7\060\uffb7\061\uffb7\001" +
    "\002\000\012\040\uffb3\045\uffb3\060\uffb3\061\uffb3\001\002" +
    "\000\012\040\uffb9\045\uffb9\060\uffb9\061\uffb9\001\002\000" +
    "\012\040\uffbb\045\uffbb\060\uffbb\061\uffbb\001\002\000\012" +
    "\040\uffc2\045\uffc2\060\uffc2\061\uffc2\001\002\000\012\040" +
    "\uffb0\045\uffb0\060\uffb0\061\uffb0\001\002\000\012\040\uffc0" +
    "\045\uffc0\060\uffc0\061\uffc0\001\002\000\012\040\uffbc\045" +
    "\uffbc\060\uffbc\061\uffbc\001\002\000\012\040\uffbf\045\uffbf" +
    "\060\uffbf\061\uffbf\001\002\000\012\040\uffca\045\uffca\060" +
    "\uffca\061\uffca\001\002\000\012\040\uffc7\045\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\012\040\uffc8\045\uffc8\060\uffc8\061" +
    "\uffc8\001\002\000\104\002\uffa8\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\046\uffa8\052\uffa8" +
    "\053\uffa8\055\uffa8\060\uffa8\001\002\000\006\002\uffd7\036" +
    "\uffd7\001\002\000\104\002\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\036\uffa7\037\uffa7\046\uffa7\052\uffa7" +
    "\053\uffa7\055\uffa7\060\uffa7\001\002\000\006\060\065\061" +
    "\063\001\002\000\006\002\uffd9\036\uffd9\001\002\000\006" +
    "\060\065\061\063\001\002\000\004\002\ufffe\001\002\000" +
    "\072\004\036\005\047\006\040\007\042\010\032\011\050" +
    "\012\035\013\030\014\054\015\041\016\061\017\027\020" +
    "\031\021\043\022\037\023\053\024\044\025\055\026\057" +
    "\027\046\030\034\031\056\032\045\033\052\034\051\045" +
    "\076\050\075\054\073\001\002\000\064\004\036\005\047" +
    "\006\040\007\042\010\032\011\050\012\035\013\030\014" +
    "\054\015\041\016\061\017\027\020\031\021\043\022\037" +
    "\023\053\024\044\025\055\026\057\027\046\030\034\031" +
    "\056\032\045\033\052\034\051\001\002\000\012\040\021" +
    "\045\023\060\172\061\063\001\002\000\004\060\104\001" +
    "\002\000\070\004\036\005\047\006\040\007\042\010\032" +
    "\011\050\012\035\013\030\014\054\015\041\016\061\017" +
    "\027\020\031\021\043\022\037\023\053\024\044\025\055" +
    "\026\057\027\046\030\034\031\056\032\045\033\052\034" +
    "\051\045\101\050\100\001\002\000\006\060\065\061\063" +
    "\001\002\000\004\060\104\001\002\000\066\004\036\005" +
    "\047\006\040\007\042\010\032\011\050\012\035\013\030" +
    "\014\054\015\041\016\061\017\027\020\031\021\043\022" +
    "\037\023\053\024\044\025\055\026\057\027\046\030\034" +
    "\031\056\032\045\033\052\034\051\050\103\001\002\000" +
    "\006\060\065\061\063\001\002\000\004\060\104\001\002" +
    "\000\004\051\110\001\002\000\010\002\uffdc\036\uffdc\050" +
    "\106\001\002\000\004\060\104\001\002\000\006\002\uffdb" +
    "\036\uffdb\001\002\000\006\052\112\060\111\001\002\000" +
    "\010\045\132\047\131\053\143\001\002\000\076\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\047\uffd6\050\uffd6\001\002\000\010\052\115\053" +
    "\117\060\114\001\002\000\006\045\132\047\131\001\002" +
    "\000\076\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\036\uffd5\037\uffd5\047\uffd5\050\uffd5\001\002\000" +
    "\006\052\122\060\114\001\002\000\004\060\114\001\002" +
    "\000\004\052\121\001\002\000\076\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\047" +
    "\uffd0\050\uffd0\001\002\000\076\002\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\047\uffd4" +
    "\050\uffd4\001\002\000\006\052\124\060\114\001\002\000" +
    "\076\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\047\uffd3\050\uffd3\001\002\000\006" +
    "\052\127\060\114\001\002\000\004\052\130\001\002\000" +
    "\076\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\037\uffd2\047\uffd2\050\uffd2\001\002\000\076" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\047\uffd1\050\uffd1\001\002\000\010\042" +
    "\137\043\142\060\141\001\002\000\064\004\036\005\047" +
    "\006\040\007\042\010\032\011\050\012\035\013\030\014" +
    "\054\015\041\016\061\017\027\020\031\021\043\022\037" +
    "\023\053\024\044\025\055\026\057\027\046\030\034\031" +
    "\056\032\045\033\052\034\051\001\002\000\006\060\065" +
    "\061\063\001\002\000\076\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\046\135\052\uffcd\053\uffcd\055\uffcd\060" +
    "\uffcd\001\002\000\006\060\065\061\063\001\002\000\074" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\052\uffcc" +
    "\053\uffcc\055\uffcc\060\uffcc\001\002\000\100\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\036\uffab\037\uffab\052" +
    "\uffab\053\uffab\055\uffab\060\uffab\001\002\000\074\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\052\uffce\053\uffce" +
    "\055\uffce\060\uffce\001\002\000\100\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\052\uffa9\053" +
    "\uffa9\055\uffa9\060\uffa9\001\002\000\100\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\052\uffaa" +
    "\053\uffaa\055\uffaa\060\uffaa\001\002\000\004\060\114\001" +
    "\002\000\004\052\145\001\002\000\076\002\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf" +
    "\047\uffcf\050\uffcf\001\002\000\006\002\uffdd\036\uffdd\001" +
    "\002\000\004\050\150\001\002\000\064\004\036\005\047" +
    "\006\040\007\042\010\032\011\050\012\035\013\030\014" +
    "\054\015\041\016\061\017\027\020\031\021\043\022\037" +
    "\023\053\024\044\025\055\026\057\027\046\030\034\031" +
    "\056\032\045\033\052\034\051\001\002\000\006\060\065" +
    "\061\063\001\002\000\006\002\uffda\036\uffda\001\002\000" +
    "\006\002\uffde\036\uffde\001\002\000\072\002\uffe5\004\036" +
    "\005\047\006\040\007\042\010\032\011\050\012\035\013" +
    "\030\014\054\015\041\016\061\017\027\020\031\021\043" +
    "\022\037\023\053\024\044\025\055\026\057\027\046\030" +
    "\034\031\056\032\045\033\052\034\051\036\uffe5\050\156" +
    "\001\002\000\010\040\163\060\162\061\063\001\002\000" +
    "\004\060\104\001\002\000\006\002\uffe4\036\uffe4\001\002" +
    "\000\004\045\167\001\002\000\010\002\uffe3\013\164\036" +
    "\uffe3\001\002\000\014\002\uffa7\013\uffa7\036\uffa7\045\uffad" +
    "\054\uffad\001\002\000\066\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\045\uffae\001\002\000\010\040\021\045" +
    "\023\060\165\001\002\000\066\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\045\uffad\001\002\000\006\002\uffe2" +
    "\036\uffe2\001\002\000\010\002\uffe0\013\170\036\uffe0\001" +
    "\002\000\010\040\021\045\023\060\165\001\002\000\006" +
    "\002\uffe1\036\uffe1\001\002\000\012\002\uffa7\036\uffa7\045" +
    "\uffad\046\175\001\002\000\006\002\uffe8\036\uffe8\001\002" +
    "\000\006\002\uffe7\036\uffe7\001\002\000\006\060\065\061" +
    "\063\001\002\000\006\002\uffdf\036\uffdf\001\002\000\006" +
    "\060\065\061\063\001\002\000\006\002\uffe6\036\uffe6\001" +
    "\002\000\010\040\021\045\023\060\165\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\000\001\002\000\010\045" +
    "\132\047\131\051\110\001\002\000\004\055\246\001\002" +
    "\000\010\036\207\037\210\047\211\001\002\000\004\047" +
    "\235\001\002\000\004\047\221\001\002\000\010\042\137" +
    "\043\142\060\141\001\002\000\006\002\ufff6\037\210\001" +
    "\002\000\006\002\ufff5\036\207\001\002\000\004\002\ufff9" +
    "\001\002\000\004\002\ufff3\001\002\000\004\002\ufff4\001" +
    "\002\000\006\036\207\037\210\001\002\000\004\002\ufffa" +
    "\001\002\000\006\040\163\060\165\001\002\000\066\004" +
    "\036\005\047\006\040\007\042\010\032\011\050\012\035" +
    "\013\030\014\054\015\041\016\061\017\027\020\031\021" +
    "\043\022\037\023\053\024\044\025\055\026\057\027\046" +
    "\030\034\031\056\032\045\033\052\034\051\045\224\001" +
    "\002\000\012\040\021\045\023\060\162\061\063\001\002" +
    "\000\064\004\036\005\047\006\040\007\042\010\032\011" +
    "\050\012\035\013\030\014\054\015\041\016\061\017\027" +
    "\020\031\021\043\022\037\023\053\024\044\025\055\026" +
    "\057\027\046\030\034\031\056\032\045\033\052\034\051" +
    "\001\002\000\006\060\065\061\063\001\002\000\006\002" +
    "\uffed\036\uffed\001\002\000\006\045\072\054\232\001\002" +
    "\000\006\002\uffef\036\uffef\001\002\000\006\002\uffee\036" +
    "\uffee\001\002\000\064\004\036\005\047\006\040\007\042" +
    "\010\032\011\050\012\035\013\030\014\054\015\041\016" +
    "\061\017\027\020\031\021\043\022\037\023\053\024\044" +
    "\025\055\026\057\027\046\030\034\031\056\032\045\033" +
    "\052\034\051\001\002\000\006\060\065\061\063\001\002" +
    "\000\006\002\uffec\036\uffec\001\002\000\012\002\ufff2\037" +
    "\ufff2\040\163\060\165\001\002\000\064\004\036\005\047" +
    "\006\040\007\042\010\032\011\050\012\035\013\030\014" +
    "\054\015\041\016\061\017\027\020\031\021\043\022\037" +
    "\023\053\024\044\025\055\026\057\027\046\030\034\031" +
    "\056\032\045\033\052\034\051\001\002\000\006\060\065" +
    "\061\063\001\002\000\032\002\ufff1\004\036\005\047\006" +
    "\040\007\042\010\032\011\050\012\035\013\030\014\054" +
    "\015\041\037\ufff1\001\002\000\006\040\163\060\165\001" +
    "\002\000\064\004\036\005\047\006\040\007\042\010\032" +
    "\011\050\012\035\013\030\014\054\015\041\016\061\017" +
    "\027\020\031\021\043\022\037\023\053\024\044\025\055" +
    "\026\057\027\046\030\034\031\056\032\045\033\052\034" +
    "\051\001\002\000\006\060\065\061\063\001\002\000\006" +
    "\002\ufff0\037\ufff0\001\002\000\004\002\ufff8\001\002\000" +
    "\004\047\247\001\002\000\006\060\065\061\063\001\002" +
    "\000\004\002\uffeb\001\002\000\004\041\252\001\002\000" +
    "\006\047\254\060\253\001\002\000\004\047\256\001\002" +
    "\000\010\040\021\045\023\060\165\001\002\000\004\002" +
    "\ufffc\001\002\000\010\040\021\045\023\060\165\001\002" +
    "\000\004\002\ufffb\001\002\000\004\057\261\001\002\000" +
    "\004\047\263\001\002\000\004\002\ufff7\001\002\000\004" +
    "\060\114\001\002\000\064\004\036\005\047\006\040\007" +
    "\042\010\032\011\050\012\035\013\030\014\054\015\041" +
    "\016\061\017\027\020\031\021\043\022\037\023\053\024" +
    "\044\025\055\026\057\027\046\030\034\031\056\032\045" +
    "\033\052\034\051\001\002\000\012\040\021\045\023\060" +
    "\162\061\063\001\002\000\004\002\uffea\001\002\000\004" +
    "\002\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\205\006\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\021\020\016\001\001\000\002\001" +
    "\001\000\014\007\061\010\067\021\024\022\057\023\025" +
    "\001\001\000\014\007\061\010\065\021\024\022\057\023" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\061\010\032\021\024\022\057\023\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\066\001\001\000\002\001\001" +
    "\000\004\015\070\001\001\000\002\001\001\000\014\007" +
    "\061\010\073\021\024\022\057\023\025\001\001\000\014" +
    "\007\061\010\176\021\024\022\057\023\025\001\001\000" +
    "\010\011\173\015\172\020\016\001\001\000\004\005\153" +
    "\001\001\000\014\007\061\010\076\021\024\022\057\023" +
    "\025\001\001\000\004\015\152\001\001\000\004\005\146" +
    "\001\001\000\014\007\061\010\101\021\024\022\057\023" +
    "\025\001\001\000\004\015\145\001\001\000\004\005\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\106\001\001\000\002\001\001\000\004\006\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\122" +
    "\001\001\000\004\006\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\124\001\001" +
    "\000\002\001\001\000\004\006\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\137" +
    "\001\001\000\014\007\061\010\132\021\024\022\057\023" +
    "\025\001\001\000\004\015\133\001\001\000\002\001\001" +
    "\000\004\015\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\061" +
    "\010\150\021\024\022\057\023\025\001\001\000\004\015" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\061\010\154\021\024\022\057\023\025\001\001\000" +
    "\006\015\160\020\157\001\001\000\004\005\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\165\020\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\170\020\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\175\001\001\000\002\001\001\000\004\015\177" +
    "\001\001\000\002\001\001\000\006\011\201\020\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\244\001\001\000\010\012\213\013\211\014" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\216\001\001\000\004\014\215\001\001\000\004\013" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\217\013\211\014\212\001\001\000" +
    "\002\001\001\000\004\020\221\001\001\000\014\007\061" +
    "\010\222\021\024\022\057\023\025\001\001\000\010\011" +
    "\230\015\227\020\226\001\001\000\014\007\061\010\224" +
    "\021\024\022\057\023\025\001\001\000\004\015\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\061\010\232\021\024\022" +
    "\057\023\025\001\001\000\004\015\233\001\001\000\002" +
    "\001\001\000\004\020\235\001\001\000\014\007\061\010" +
    "\236\021\024\022\057\023\025\001\001\000\004\015\237" +
    "\001\001\000\004\007\240\001\001\000\004\020\241\001" +
    "\001\000\014\007\061\010\242\021\024\022\057\023\025" +
    "\001\001\000\004\015\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\254\020\016\001\001\000\002" +
    "\001\001\000\006\011\256\020\016\001\001\000\002\001" +
    "\001\000\004\016\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\263\001\001\000\014\007\061\010" +
    "\264\021\024\022\057\023\025\001\001\000\010\011\266" +
    "\015\265\020\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTEXT_INC DOBLEPUNTOS METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CONTEXT_INC INVARIANTE DOSPUNTOS EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CONTEXT_INC INVARIANTE DOSPUNTOS IDENTIFICADOR OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CONTEXT_INC INVARIANTE IDENTIFICADOR DOSPUNTOS EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CONTEXT_INC DOSPUNTOS IDENTIFICADOR INVARIANTE DOSPUNTOS EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= CONTEXT_INC DOSPUNTOS IDENTIFICADOR INVARIANTE IDENTIFICADOR DOSPUNTOS EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= CONTEXT_INC DOBLEPUNTOS METHOD DOSPUNTOS TIPOVALOR PREPOST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= CONTEXT_INC DOBLEPUNTOS METHOD PREPOST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= CONTEXT_INC DOBLEPUNTOS ATRIBUTOS_METODO EST_INI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= CONTEXT_INC DEFINICION DOSPUNTOS EST_DEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PREPOST ::= PRECON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREPOST",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PREPOST ::= POSTCON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREPOST",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PREPOST ::= PRECON POSTCON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREPOST",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PREPOST ::= POSTCON PRECON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PREPOST",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PRECON ::= PRECONDICION DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRECON",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PRECON ::= PRECONDICION DOSPUNTOS SELFTIDEN OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRECON",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRECON ::= PRECONDICION DOSPUNTOS SELFTIDEN OPERACION VALOR OPERACIONBOOLENAS SELFTIDEN OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRECON",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // POSTCON ::= POSTCONDICION DOSPUNTOS SELFTIDEN OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSTCON",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // POSTCON ::= POSTCONDICION DOSPUNTOS SELFTIDEN OPERACION EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSTCON",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // POSTCON ::= POSTCONDICION DOSPUNTOS SELFTIDEN ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSTCON",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // POSTCON ::= POSTCONDICION DOSPUNTOS SELFTIDEN OPERACION SELFTIDEN VALORPROPIEDAD OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POSTCON",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EST_INI ::= VALORINICIAL DOSPUNTOS VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_INI",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EST_DEF ::= LET DOSPUNTOS ATRIBUTOS_METODO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_DEF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EST_DEF ::= LET DOSPUNTOS ATRIBUTOS_METODO OPERACION EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_DEF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EST_SELF ::= SELFTIDEN ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EST_SELF ::= SELFTIDEN ATRIBUTO OPERACION EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EST_SELF ::= SELFTIDEN ATRIBUTO VALORPROPIEDAD OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD FLECHA METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD OPERACION VALOR AND EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD OPERACION SELFTIDEN ATRIBUTO AND EST_SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EST_SELF ::= SELFTIDEN ATRIBUTO FLECHA METHOD OPERACION SELFTIDEN ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EST_SELF ::= SELFTIDEN ATRIBUTO OPERACION IDENTIFICADOR DOBLEPUNTOS VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EST_SELF ::= SELFTIDEN ATRIBUTO ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EST_SELF ::= SELFTIDEN ATRIBUTO ATRIBUTO ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EST_SELF ::= SELFTIDEN ATRIBUTO ATRIBUTO ATRIBUTO FLECHA METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EST_SELF ::= SELFTIDEN ATRIBUTO ATRIBUTO ATRIBUTO FLECHA METHOD FLECHA METHOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EST_SELF ::= SELFTIDEN ATRIBUTO ATRIBUTO FLECHA METHOD FLECHA OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EST_SELF ::= SELF OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EST_SELF ::= ATRIBUTO ATRIBUTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EST_SELF ::= ATRIBUTO ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EST_SELF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ ATRIBUTOS_METODO O ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD ::= IDENTIFICADOR PARENTESIS_IZQ IDENTIFICADOR O ATRIBUTOS_METODO PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOS_METODO ::= IDENTIFICADOR DOSPUNTOS TIPOVALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUTOS_METODO ::= IDENTIFICADOR ATRIBUTO OPERACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUTOS_METODO ::= IDENTIFICADOR ATRIBUTO OPERACION VALOR DOBLEPUNTOS VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_METODO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= OPERACIONESINTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= OPERACIONESREAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= OPERACIONESSTRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= OPERACIONBOOLENAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACIONESINTEGER ::= MAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACIONESINTEGER ::= MENOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONESINTEGER ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONESINTEGER ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONESINTEGER ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONESINTEGER ::= VALOR_ABSOLUTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACIONESINTEGER ::= MAXIMO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACIONESINTEGER ::= MINIMO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESINTEGER",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACIONESREAL ::= REDONDEO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESREAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACIONESREAL ::= TRUNCADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESREAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACIONESSTRING ::= CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESSTRING",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACIONESSTRING ::= SIZE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESSTRING",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACIONESSTRING ::= MAYUSCULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESSTRING",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACIONESSTRING ::= MINUSCULA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESSTRING",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACIONESSTRING ::= SUBSTRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONESSTRING",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACIONBOOLENAS ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACIONBOOLENAS ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACIONBOOLENAS ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACIONBOOLENAS ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACIONBOOLENAS ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACIONBOOLENAS ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERACIONBOOLENAS ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERACIONBOOLENAS ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERACIONBOOLENAS ::= XOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERACIONBOOLENAS ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONBOOLENAS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SELFTIDEN ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELFTIDEN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SELFTIDEN ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELFTIDEN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTEXT_INC ::= CONTEXT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTEXT_INC",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOVALOR ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOVALOR ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPOVALOR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALOR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
