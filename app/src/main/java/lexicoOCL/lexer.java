// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

/*** SECCION DEFICION ***/
package lexicoOCL;
import static lexicoOCL.Tokens.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\22\0\1\1\7\0\1\3"+
    "\1\4\1\5\1\6\1\1\1\7\1\10\1\11\12\12"+
    "\1\13\1\0\1\14\1\15\1\16\1\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\27\1\31\1\32\1\33\1\34\1\35\1\27\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\27\1\45"+
    "\4\0\1\27\1\0\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\27\1\55\1\56\1\27\1\57\1\60"+
    "\1\61\1\62\1\63\1\27\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\0\1\75\10\0"+
    "\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\30\17\1\20\1\0\1\21\21\22\1\23\1\24\1\25"+
    "\1\26\2\0\1\27\15\17\1\30\24\17\2\0\27\22"+
    "\2\0\1\31\6\17\1\32\3\17\1\33\2\17\1\34"+
    "\1\35\1\17\1\36\2\17\1\37\1\40\7\17\1\27"+
    "\3\17\1\12\1\41\2\22\1\11\2\22\1\42\1\43"+
    "\1\44\12\22\1\45\7\17\1\46\2\17\1\47\11\17"+
    "\6\22\1\50\6\22\17\17\2\22\1\51\1\52\6\22"+
    "\15\17\1\53\6\22\1\54\1\17\1\55\1\17\1\56"+
    "\1\57\1\27\1\17\2\22\1\60\1\61\2\17\1\27"+
    "\2\22\2\17\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\76\0\76\0\370"+
    "\0\u0136\0\76\0\u0174\0\u01b2\0\u01f0\0\76\0\u022e\0\u026c"+
    "\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\76\0\u087a\0\76\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\76\0\76\0\76\0\76"+
    "\0\u0cd6\0\u0d14\0\76\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u03a2\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u03a2\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u03a2"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u03a2\0\u1e08\0\u1e46\0\u03a2\0\u03a2"+
    "\0\u1e84\0\u03a2\0\u1ec2\0\u1f00\0\u03a2\0\u03a2\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u03a2\0\u20f0\0\u212e"+
    "\0\u216c\0\76\0\u08f6\0\u21aa\0\u21e8\0\u08f6\0\u2226\0\u2264"+
    "\0\u08f6\0\u08f6\0\u08f6\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\76\0\u250e\0\u254c"+
    "\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u03a2\0\u26c0\0\u26fe"+
    "\0\u03a2\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u08f6\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u08f6\0\u08f6\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u08f6\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u03a2\0\u367e\0\u03a2\0\u36bc"+
    "\0\u03a2\0\u03a2\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u08f6\0\u08f6"+
    "\0\u37b4\0\u37f2\0\u1ff8\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u08f6"+
    "\0\u03a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\4\25\1\26\1\27\1\25"+
    "\1\30\1\31\1\32\1\25\1\33\4\25\1\34\2\25"+
    "\1\35\1\36\1\37\1\40\1\41\1\25\1\42\1\25"+
    "\1\43\1\25\1\44\1\45\1\46\1\47\1\50\7\25"+
    "\1\51\77\0\1\3\103\0\1\52\104\0\1\53\77\0"+
    "\1\54\1\55\1\56\1\57\1\55\1\60\4\55\1\61"+
    "\3\55\1\62\1\63\1\64\5\55\1\65\1\55\1\66"+
    "\1\67\1\55\1\70\4\55\1\71\3\55\1\72\1\73"+
    "\1\74\6\55\13\0\1\13\76\0\1\75\77\0\1\76"+
    "\1\77\74\0\1\100\115\0\1\101\25\0\1\102\15\0"+
    "\1\103\6\0\1\25\5\0\13\25\1\104\41\25\4\0"+
    "\1\103\6\0\1\25\5\0\14\25\1\105\25\25\1\106"+
    "\12\25\4\0\1\103\6\0\1\25\5\0\14\25\1\107"+
    "\25\25\1\110\12\25\4\0\1\103\6\0\1\25\5\0"+
    "\4\25\1\111\25\25\1\112\22\25\4\0\1\103\6\0"+
    "\1\25\5\0\55\25\4\0\1\103\6\0\1\25\5\0"+
    "\12\25\1\113\1\114\25\25\1\115\13\25\4\0\1\103"+
    "\6\0\1\25\5\0\4\25\1\116\25\25\1\117\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\14\25\1\120\40\25"+
    "\4\0\1\103\6\0\1\25\5\0\16\25\1\121\36\25"+
    "\4\0\1\103\6\0\1\25\5\0\14\25\1\122\1\25"+
    "\1\123\23\25\1\124\1\25\1\125\10\25\4\0\1\103"+
    "\6\0\1\25\5\0\4\25\1\126\25\25\1\127\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\14\25\1\130\40\25"+
    "\4\0\1\103\6\0\1\25\5\0\42\25\1\106\12\25"+
    "\4\0\1\103\6\0\1\25\5\0\42\25\1\131\12\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\112\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\52\25\1\132\2\25"+
    "\4\0\1\103\6\0\1\25\5\0\42\25\1\133\12\25"+
    "\4\0\1\103\6\0\1\25\5\0\41\25\1\134\3\25"+
    "\1\135\1\136\6\25\4\0\1\103\6\0\1\25\5\0"+
    "\32\25\1\117\22\25\4\0\1\103\6\0\1\25\5\0"+
    "\42\25\1\137\12\25\4\0\1\103\6\0\1\25\5\0"+
    "\41\25\1\140\13\25\4\0\1\103\6\0\1\25\5\0"+
    "\42\25\1\124\1\25\1\125\10\25\4\0\1\103\6\0"+
    "\1\25\5\0\32\25\1\141\22\25\4\0\1\103\6\0"+
    "\1\25\5\0\32\25\1\142\2\25\1\143\4\25\1\144"+
    "\4\25\1\145\5\25\13\0\1\146\66\0\1\147\6\0"+
    "\1\55\5\0\1\55\1\150\53\55\4\0\1\147\6\0"+
    "\1\55\5\0\55\55\4\0\1\147\6\0\1\55\5\0"+
    "\14\55\1\151\25\55\1\152\12\55\4\0\1\147\6\0"+
    "\1\55\5\0\10\55\1\153\24\55\1\154\17\55\4\0"+
    "\1\147\6\0\1\55\5\0\11\55\1\155\25\55\1\156"+
    "\15\55\4\0\1\147\6\0\1\55\5\0\1\157\7\55"+
    "\1\160\3\55\1\161\11\55\1\162\6\55\1\163\4\55"+
    "\1\164\12\55\4\0\1\147\6\0\1\55\5\0\14\55"+
    "\1\165\25\55\1\166\12\55\4\0\1\147\6\0\1\55"+
    "\5\0\10\55\1\167\10\55\1\170\13\55\1\171\11\55"+
    "\1\172\5\55\4\0\1\147\6\0\1\55\5\0\14\55"+
    "\1\173\25\55\1\174\12\55\4\0\1\147\6\0\1\55"+
    "\5\0\27\55\1\175\25\55\4\0\1\147\6\0\1\55"+
    "\5\0\42\55\1\152\12\55\4\0\1\147\6\0\1\55"+
    "\5\0\35\55\1\154\17\55\4\0\1\147\6\0\1\55"+
    "\5\0\37\55\1\156\15\55\4\0\1\147\6\0\1\55"+
    "\5\0\26\55\1\162\6\55\1\163\4\55\1\164\12\55"+
    "\4\0\1\147\6\0\1\55\5\0\42\55\1\166\12\55"+
    "\4\0\1\147\6\0\1\55\5\0\35\55\1\171\11\55"+
    "\1\172\5\55\4\0\1\147\6\0\1\55\5\0\42\55"+
    "\1\176\12\55\37\0\1\177\25\0\1\200\75\0\1\200"+
    "\14\0\1\103\6\0\1\25\5\0\3\25\1\201\51\25"+
    "\4\0\1\103\6\0\1\25\5\0\14\25\1\202\40\25"+
    "\4\0\1\103\6\0\1\25\5\0\42\25\1\203\12\25"+
    "\4\0\1\103\6\0\1\25\5\0\11\25\1\204\1\25"+
    "\1\205\41\25\4\0\1\103\6\0\1\25\5\0\37\25"+
    "\1\206\1\25\1\207\13\25\4\0\1\103\6\0\1\25"+
    "\5\0\5\25\1\210\47\25\4\0\1\103\6\0\1\25"+
    "\5\0\33\25\1\210\21\25\4\0\1\103\6\0\1\25"+
    "\5\0\15\25\1\211\37\25\4\0\1\103\6\0\1\25"+
    "\5\0\10\25\1\212\7\25\1\213\1\25\1\214\32\25"+
    "\4\0\1\103\6\0\1\25\5\0\35\25\1\215\10\25"+
    "\1\216\1\25\1\214\4\25\4\0\1\103\6\0\1\25"+
    "\5\0\20\25\1\217\34\25\4\0\1\103\6\0\1\25"+
    "\5\0\46\25\1\217\6\25\4\0\1\103\6\0\1\25"+
    "\5\0\20\25\1\220\34\25\4\0\1\103\6\0\1\25"+
    "\5\0\17\25\1\221\35\25\4\0\1\103\6\0\1\25"+
    "\5\0\4\25\1\222\50\25\4\0\1\103\6\0\1\25"+
    "\5\0\45\25\1\223\7\25\4\0\1\103\6\0\1\25"+
    "\5\0\32\25\1\222\22\25\4\0\1\103\6\0\1\25"+
    "\5\0\11\25\1\224\43\25\4\0\1\103\6\0\1\25"+
    "\5\0\37\25\1\225\15\25\4\0\1\103\6\0\1\25"+
    "\5\0\16\25\1\226\36\25\4\0\1\103\6\0\1\25"+
    "\5\0\37\25\1\227\1\25\1\207\5\25\1\230\5\25"+
    "\4\0\1\103\6\0\1\25\5\0\35\25\1\231\17\25"+
    "\4\0\1\103\6\0\1\25\5\0\44\25\1\232\10\25"+
    "\4\0\1\103\6\0\1\25\5\0\30\25\1\233\4\25"+
    "\1\215\10\25\1\216\1\25\1\214\4\25\4\0\1\103"+
    "\6\0\1\25\5\0\4\25\1\234\50\25\4\0\1\103"+
    "\6\0\1\25\5\0\32\25\1\235\22\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\135\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\32\25\1\236\22\25\4\0\1\103"+
    "\6\0\1\25\5\0\36\25\1\237\16\25\4\0\1\103"+
    "\6\0\1\25\5\0\37\25\1\240\15\25\4\0\1\103"+
    "\6\0\1\25\5\0\54\25\1\140\4\0\1\103\6\0"+
    "\1\25\5\0\44\25\1\241\10\25\4\0\1\103\6\0"+
    "\1\25\5\0\40\25\1\236\14\25\5\0\1\242\5\0"+
    "\1\146\67\0\1\103\74\0\1\147\6\0\1\55\5\0"+
    "\17\55\1\243\35\55\4\0\1\147\6\0\1\55\5\0"+
    "\13\55\1\244\41\55\4\0\1\147\6\0\1\55\5\0"+
    "\41\55\1\245\13\55\4\0\1\147\6\0\1\55\5\0"+
    "\22\55\1\246\32\55\4\0\1\147\6\0\1\55\5\0"+
    "\50\55\1\246\4\55\4\0\1\147\6\0\1\55\5\0"+
    "\14\55\1\247\40\55\4\0\1\147\6\0\1\55\5\0"+
    "\42\55\1\250\12\55\4\0\1\147\6\0\1\55\5\0"+
    "\24\55\1\251\30\55\4\0\1\147\6\0\1\55\5\0"+
    "\13\55\1\252\41\55\4\0\1\147\6\0\1\55\5\0"+
    "\3\55\1\253\51\55\4\0\1\147\6\0\1\55\5\0"+
    "\52\55\1\251\2\55\4\0\1\147\6\0\1\55\5\0"+
    "\41\55\1\252\13\55\4\0\1\147\6\0\1\55\5\0"+
    "\31\55\1\253\23\55\4\0\1\147\6\0\1\55\5\0"+
    "\21\55\1\254\33\55\4\0\1\147\6\0\1\55\5\0"+
    "\47\55\1\255\5\55\4\0\1\147\6\0\1\55\5\0"+
    "\25\55\1\256\27\55\4\0\1\147\6\0\1\55\5\0"+
    "\1\55\1\257\53\55\4\0\1\147\6\0\1\55\5\0"+
    "\54\55\1\260\4\0\1\147\6\0\1\55\5\0\27\55"+
    "\1\261\25\55\4\0\1\147\6\0\1\55\5\0\11\55"+
    "\1\262\7\55\1\263\33\55\4\0\1\147\6\0\1\55"+
    "\5\0\11\55\1\264\7\55\1\265\15\55\1\264\7\55"+
    "\1\265\5\55\4\0\1\147\6\0\1\55\5\0\45\55"+
    "\1\243\7\55\4\0\1\147\6\0\1\55\5\0\37\55"+
    "\1\264\7\55\1\265\5\55\25\0\1\266\123\0\1\266"+
    "\26\0\1\103\6\0\1\25\5\0\11\25\1\267\43\25"+
    "\4\0\1\103\6\0\1\25\5\0\37\25\1\270\15\25"+
    "\4\0\1\103\6\0\1\25\5\0\11\25\1\271\43\25"+
    "\4\0\1\103\6\0\1\25\5\0\20\25\1\272\34\25"+
    "\4\0\1\103\6\0\1\25\5\0\37\25\1\273\15\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\274\6\25"+
    "\4\0\1\103\6\0\1\25\5\0\11\25\1\275\43\25"+
    "\4\0\1\103\6\0\1\25\5\0\20\25\1\276\34\25"+
    "\4\0\1\103\6\0\1\25\5\0\4\25\1\277\50\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\276\6\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\300\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\20\25\1\301\34\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\301\6\25"+
    "\4\0\1\103\6\0\1\25\5\0\5\25\1\225\47\25"+
    "\4\0\1\103\6\0\1\25\5\0\37\25\1\302\15\25"+
    "\4\0\1\103\6\0\1\25\5\0\41\25\1\303\13\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\304\6\25"+
    "\4\0\1\103\6\0\1\25\5\0\1\305\54\25\4\0"+
    "\1\103\6\0\1\25\5\0\37\25\1\306\15\25\4\0"+
    "\1\103\6\0\1\25\5\0\40\25\1\307\14\25\4\0"+
    "\1\103\6\0\1\25\5\0\44\25\1\310\10\25\4\0"+
    "\1\103\6\0\1\25\5\0\32\25\1\311\22\25\4\0"+
    "\1\103\6\0\1\25\5\0\32\25\1\311\1\225\21\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\312\6\25"+
    "\4\0\1\147\6\0\1\55\5\0\2\55\1\313\52\55"+
    "\4\0\1\147\6\0\1\55\5\0\30\55\1\314\24\55"+
    "\4\0\1\147\6\0\1\55\5\0\14\55\1\315\40\55"+
    "\4\0\1\147\6\0\1\55\5\0\42\55\1\316\12\55"+
    "\4\0\1\147\6\0\1\55\5\0\13\55\1\317\41\55"+
    "\4\0\1\147\6\0\1\55\5\0\41\55\1\320\13\55"+
    "\4\0\1\147\6\0\1\55\5\0\4\55\1\321\50\55"+
    "\4\0\1\147\6\0\1\55\5\0\17\55\1\322\35\55"+
    "\4\0\1\147\6\0\1\55\5\0\32\55\1\321\22\55"+
    "\4\0\1\147\6\0\1\55\5\0\45\55\1\323\7\55"+
    "\4\0\1\147\6\0\1\55\5\0\14\55\1\324\40\55"+
    "\4\0\1\147\6\0\1\55\5\0\15\55\1\325\37\55"+
    "\4\0\1\147\6\0\1\55\5\0\42\55\1\326\12\55"+
    "\4\0\1\147\6\0\1\55\5\0\43\55\1\327\11\55"+
    "\4\0\1\103\6\0\1\25\5\0\4\25\1\330\50\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\331\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\4\25\1\332\50\25"+
    "\4\0\1\103\6\0\1\25\5\0\4\25\1\333\50\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\334\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\335\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\10\25\1\336\44\25"+
    "\4\0\1\103\6\0\1\25\5\0\6\25\1\337\46\25"+
    "\4\0\1\103\6\0\1\25\5\0\34\25\1\340\20\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\341\22\25"+
    "\4\0\1\103\6\0\1\25\5\0\46\25\1\236\6\25"+
    "\4\0\1\103\6\0\1\25\5\0\45\25\1\236\7\25"+
    "\4\0\1\103\6\0\1\25\5\0\37\25\1\342\15\25"+
    "\4\0\1\103\6\0\1\25\5\0\47\25\1\343\5\25"+
    "\4\0\1\103\6\0\1\25\5\0\43\25\1\344\11\25"+
    "\4\0\1\103\6\0\1\25\5\0\26\25\1\345\26\25"+
    "\4\0\1\103\6\0\1\25\5\0\30\25\1\303\24\25"+
    "\4\0\1\103\6\0\1\25\5\0\32\25\1\346\22\25"+
    "\4\0\1\147\6\0\1\55\5\0\1\347\54\55\4\0"+
    "\1\147\6\0\1\55\5\0\26\55\1\350\26\55\4\0"+
    "\1\147\6\0\1\55\5\0\16\55\1\351\36\55\4\0"+
    "\1\147\6\0\1\55\5\0\44\55\1\351\10\55\4\0"+
    "\1\147\6\0\1\55\5\0\3\55\1\352\51\55\4\0"+
    "\1\147\6\0\1\55\5\0\31\55\1\352\23\55\4\0"+
    "\1\147\6\0\1\55\5\0\20\55\1\353\34\55\4\0"+
    "\1\147\6\0\1\55\5\0\46\55\1\354\6\55\4\0"+
    "\1\147\6\0\1\55\5\0\23\55\1\355\31\55\4\0"+
    "\1\147\6\0\1\55\5\0\15\55\1\356\37\55\4\0"+
    "\1\147\6\0\1\55\5\0\51\55\1\357\3\55\4\0"+
    "\1\147\6\0\1\55\5\0\43\55\1\360\11\55\4\0"+
    "\1\103\6\0\1\25\5\0\1\361\54\25\4\0\1\103"+
    "\6\0\1\25\5\0\26\25\1\362\26\25\4\0\1\103"+
    "\6\0\1\25\5\0\2\25\1\363\52\25\4\0\1\103"+
    "\6\0\1\25\5\0\24\25\1\364\30\25\4\0\1\103"+
    "\6\0\1\25\5\0\30\25\1\365\24\25\4\0\1\103"+
    "\6\0\1\25\5\0\52\25\1\366\2\25\4\0\1\103"+
    "\6\0\1\25\5\0\4\25\1\367\50\25\4\0\1\103"+
    "\6\0\1\25\5\0\4\25\1\370\50\25\4\0\1\103"+
    "\6\0\1\25\5\0\32\25\1\371\22\25\4\0\1\103"+
    "\6\0\1\25\5\0\30\25\1\372\24\25\4\0\1\103"+
    "\6\0\1\25\5\0\37\25\1\236\15\25\4\0\1\103"+
    "\6\0\1\25\5\0\31\25\1\373\23\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\374\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\140\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\31\25\1\375\23\25\4\0\1\147"+
    "\6\0\1\55\5\0\20\55\1\376\34\55\4\0\1\147"+
    "\6\0\1\55\5\0\46\55\1\376\6\55\4\0\1\147"+
    "\6\0\1\55\5\0\16\55\1\377\36\55\4\0\1\147"+
    "\6\0\1\55\5\0\44\55\1\u0100\10\55\4\0\1\147"+
    "\6\0\1\55\5\0\4\55\1\u0101\50\55\4\0\1\147"+
    "\6\0\1\55\5\0\4\55\1\u0102\50\55\4\0\1\147"+
    "\6\0\1\55\5\0\32\55\1\u0103\22\55\4\0\1\147"+
    "\6\0\1\55\5\0\32\55\1\u0104\22\55\4\0\1\103"+
    "\6\0\1\25\5\0\13\25\1\u0105\41\25\4\0\1\103"+
    "\6\0\1\25\5\0\41\25\1\u0105\13\25\4\0\1\103"+
    "\6\0\1\25\5\0\20\25\1\u0106\34\25\4\0\1\103"+
    "\6\0\1\25\5\0\20\25\1\u0107\34\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\u0108\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\u0107\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\17\25\1\u0109\35\25\4\0\1\103"+
    "\6\0\1\25\5\0\16\25\1\u010a\36\25\4\0\1\103"+
    "\6\0\1\25\5\0\44\25\1\u010a\10\25\4\0\1\103"+
    "\6\0\1\25\5\0\46\25\1\u010b\6\25\4\0\1\103"+
    "\6\0\1\25\5\0\32\25\1\u010c\22\25\4\0\1\103"+
    "\6\0\1\25\5\0\53\25\1\236\1\25\4\0\1\103"+
    "\6\0\1\25\5\0\1\25\1\374\53\25\4\0\1\147"+
    "\6\0\1\55\5\0\10\55\1\u010d\44\55\4\0\1\147"+
    "\6\0\1\55\5\0\35\55\1\u010e\17\55\4\0\1\147"+
    "\6\0\1\55\5\0\16\55\1\u010f\36\55\4\0\1\147"+
    "\6\0\1\55\5\0\16\55\1\u0110\36\55\4\0\1\147"+
    "\6\0\1\55\5\0\44\55\1\u010f\10\55\4\0\1\147"+
    "\6\0\1\55\5\0\44\55\1\u0110\10\55\4\0\1\103"+
    "\6\0\1\25\5\0\10\25\1\u0111\44\25\4\0\1\103"+
    "\6\0\1\25\5\0\35\25\1\u0112\17\25\4\0\1\103"+
    "\6\0\1\25\5\0\45\25\1\u0113\7\25\4\0\1\147"+
    "\6\0\1\55\5\0\13\55\1\u0114\41\55\4\0\1\147"+
    "\6\0\1\55\5\0\41\55\1\u0115\13\55\4\0\1\103"+
    "\6\0\1\25\5\0\14\25\1\u0116\40\25\4\0\1\103"+
    "\6\0\1\25\5\0\42\25\1\u0117\12\25\4\0\1\147"+
    "\6\0\1\55\5\0\6\55\1\u0118\46\55\4\0\1\147"+
    "\6\0\1\55\5\0\34\55\1\u0118\20\55\4\0\1\103"+
    "\6\0\1\25\5\0\13\25\1\u0119\41\25\4\0\1\103"+
    "\6\0\1\25\5\0\41\25\1\u0119\13\25\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\2\1\1\11\3\1\1\11"+
    "\32\1\1\11\1\0\1\11\21\1\4\11\2\0\1\11"+
    "\42\1\2\0\27\1\2\0\41\1\1\11\23\1\1\11"+
    "\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  public int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	public String lexeme; 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 52: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 53: break;
          case 3:
            { lexeme=yytext(); return PARENTESIS_IZQ;
            }
            // fall through
          case 54: break;
          case 4:
            { lexeme=yytext(); return PARENTESIS_DER;
            }
            // fall through
          case 55: break;
          case 5:
            { lexeme=yytext(); return MULTIPLICACION;
            }
            // fall through
          case 56: break;
          case 6:
            { lexeme=yytext(); return MAS;
            }
            // fall through
          case 57: break;
          case 7:
            { lexeme=yytext(); return MENOS;
            }
            // fall through
          case 58: break;
          case 8:
            { lexeme=yytext(); return PUNTO;
            }
            // fall through
          case 59: break;
          case 9:
            { lexeme=yytext(); return DIVISION;
            }
            // fall through
          case 60: break;
          case 10:
            { lexeme=yytext(); return NUMERO;
            }
            // fall through
          case 61: break;
          case 11:
            { lexeme=yytext(); return DOSPUNTOS;
            }
            // fall through
          case 62: break;
          case 12:
            { lexeme=yytext(); return MENOR;
            }
            // fall through
          case 63: break;
          case 13:
            { lexeme=yytext(); return IGUAL;
            }
            // fall through
          case 64: break;
          case 14:
            { lexeme=yytext(); return MAYOR;
            }
            // fall through
          case 65: break;
          case 15:
            { lexeme=yytext(); return IDENTIFICADOR;
            }
            // fall through
          case 66: break;
          case 16:
            { lexeme=yytext(); return O;
            }
            // fall through
          case 67: break;
          case 17:
            { lexeme=yytext(); return FLECHA;
            }
            // fall through
          case 68: break;
          case 18:
            { lexeme=yytext(); return ATRIBUTO;
            }
            // fall through
          case 69: break;
          case 19:
            { lexeme=yytext(); return DOBLEPUNTOS;
            }
            // fall through
          case 70: break;
          case 20:
            { lexeme=yytext(); return MENOR_IGUAL;
            }
            // fall through
          case 71: break;
          case 21:
            { lexeme=yytext(); return DISTINTO;
            }
            // fall through
          case 72: break;
          case 22:
            { lexeme=yytext(); return MAYOR_IGUAL;
            }
            // fall through
          case 73: break;
          case 23:
            { lexeme=yytext(); return METODO;
            }
            // fall through
          case 74: break;
          case 24:
            { lexeme=yytext(); return OR;
            }
            // fall through
          case 75: break;
          case 25:
            { lexeme=yytext(); return AND;
            }
            // fall through
          case 76: break;
          case 26:
            { lexeme=yytext(); return DEFINICION;
            }
            // fall through
          case 77: break;
          case 27:
            { lexeme=yytext(); return INVARIANTE;
            }
            // fall through
          case 78: break;
          case 28:
            { lexeme=yytext(); return LET;
            }
            // fall through
          case 79: break;
          case 29:
            { lexeme=yytext(); return NOT;
            }
            // fall through
          case 80: break;
          case 30:
            { lexeme=yytext(); return PRECONDICION;
            }
            // fall through
          case 81: break;
          case 31:
            { lexeme=yytext(); return SELF;
            }
            // fall through
          case 82: break;
          case 32:
            { lexeme=yytext(); return XOR;
            }
            // fall through
          case 83: break;
          case 33:
            { lexeme=yytext(); return VALOR_ABSOLUTO;
            }
            // fall through
          case 84: break;
          case 34:
            { lexeme=yytext(); return MAXIMO;
            }
            // fall through
          case 85: break;
          case 35:
            { lexeme=yytext(); return MINIMO;
            }
            // fall through
          case 86: break;
          case 36:
            { lexeme=yytext(); return MODULO;
            }
            // fall through
          case 87: break;
          case 37:
            { lexeme=yytext(); return VALORPROPIEDAD;
            }
            // fall through
          case 88: break;
          case 38:
            { lexeme=yytext(); return VALORINICIAL;
            }
            // fall through
          case 89: break;
          case 39:
            { lexeme=yytext(); return POSTCONDICION;
            }
            // fall through
          case 90: break;
          case 40:
            { lexeme=yytext(); return SIZE;
            }
            // fall through
          case 91: break;
          case 41:
            { lexeme=yytext(); return TRUNCADO;
            }
            // fall through
          case 92: break;
          case 42:
            { lexeme=yytext(); return REDONDEO;
            }
            // fall through
          case 93: break;
          case 43:
            { lexeme=yytext(); return CONCATENACION;
            }
            // fall through
          case 94: break;
          case 44:
            { lexeme=yytext(); return BOOLEAN;
            }
            // fall through
          case 95: break;
          case 45:
            { lexeme=yytext(); return CONTEXT;
            }
            // fall through
          case 96: break;
          case 46:
            { lexeme=yytext(); return IMPLIES;
            }
            // fall through
          case 97: break;
          case 47:
            { lexeme=yytext(); return INTEGER;
            }
            // fall through
          case 98: break;
          case 48:
            { lexeme=yytext(); return MINUSCULAS;
            }
            // fall through
          case 99: break;
          case 49:
            { lexeme=yytext(); return MAYUSCULAS;
            }
            // fall through
          case 100: break;
          case 50:
            { lexeme=yytext(); return SUBSTRING;
            }
            // fall through
          case 101: break;
          case 51:
            { lexeme=yytext(); return COLLECTION;
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
